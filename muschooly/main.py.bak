import os
import random
import sqlite3
import pytz
from datetime import datetime
from dotenv import load_dotenv
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext,
    MessageHandler,
    Filters,
    ConversationHandler
)

load_dotenv()

# Initialize database connection
conn = sqlite3.connect('bot.db', check_same_thread=False)

def get_random_picture(exclude_id=None):
    cursor = conn.cursor()
    if exclude_id:
        cursor.execute('SELECT * FROM pictures WHERE picture_id != ? ORDER BY RANDOM() LIMIT 1', (exclude_id,))
    else:
        cursor.execute('SELECT * FROM pictures ORDER BY RANDOM() LIMIT 1')
    return cursor.fetchone()

def send_daily_messages(context: CallbackContext):
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    if not (9 <= now.hour < 22):
        return

    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users WHERE is_subscribed = 1')
    users = cursor.fetchall()
    admin_message="üìä New questions sent to users!"

    for user in users:
        user_id = user[0]
        if str(user_id) != str(os.getenv('ADMIN_USER_ID')):
            picture = get_random_picture()
            if not picture:
                return

            correct_answer = picture[2]
            other_pictures = cursor.execute('SELECT correct_answer FROM pictures WHERE picture_id != ?', (picture[0],)).fetchall()
            wrong_answer = random.choice(other_pictures)[0] if other_pictures else "No alternative answer"

            keyboard = [
                [InlineKeyboardButton(correct_answer, callback_data='correct'), InlineKeyboardButton(wrong_answer, callback_data='wrong')]
            ]
            random.shuffle(keyboard)

            reply_markup = InlineKeyboardMarkup(keyboard)

            try:
                message = context.bot.send_photo(
                    chat_id=user_id,
                    photo=picture[1],
                    caption=picture[3],
                    reply_markup=reply_markup
                )

                # Store sent message
                cursor.execute('INSERT INTO sent_messages (picture_id, sent_time, user_id) VALUES (?, ?, ?)',
                            (picture[0], datetime.now(), user_id))
                conn.commit()

                # Notify admin
                admin_message += f"\nQuestion ID: {picture[0]}\nCorrect answer: {correct_answer}, User: {user_id}"

            except Exception as e:
                print(f"Error sending message to {user_id}: {e}")
    context.bot.send_message(chat_id=os.getenv('ADMIN_USER_ID'), text=admin_message)

def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor = conn.cursor()

    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    cursor.execute('UPDATE users SET is_subscribed = 1 WHERE user_id = ?', (user_id,))
    conn.commit()

    update.message.reply_text("üéâ Welcome! You'll receive daily questions!")

def handle_answer(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    answer = query.data
    message_id = query.message.message_id

    # Check if answer is correct
    is_correct = 1 if answer == 'correct' else 0

    # Store response
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO responses (user_id, message_id, selected_answer, is_correct, timestamp)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, message_id, answer, is_correct, datetime.now()))
    conn.commit()

    if is_correct == 1:
        try:
            context.bot.delete_message(
                chat_id=query.message.chat_id,
                message_id=message_id
            )
        except Exception as e:
            print(f"Delete error: {e}")

    # Send feedback
    query.answer("‚úÖ Correct!" if is_correct else "‚ùå Incorrect!")

def admin_login(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    password = ' '.join(context.args)

    if password == os.getenv('ADMIN_PASSWORD'):
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET is_admin = 1 WHERE user_id = ?', (user_id,))
        conn.commit()
        update.message.reply_text("üîë Admin access granted!")
    else:
        update.message.reply_text("üö´ Invalid password!")

def show_stats(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    cursor = conn.cursor()

    cursor.execute('SELECT is_admin FROM users WHERE user_id = ?', (user_id,))
    is_admin = cursor.fetchone()

    if not is_admin or not is_admin[0]:
        update.message.reply_text("üö´ Access denied!")
        return

    # Get statistics
    cursor.execute('''
        SELECT
            COUNT(*) as total_responses,
            SUM(is_correct) as correct_answers,
            (SUM(is_correct) * 100.0) / COUNT(*) as accuracy
        FROM responses
    ''')
    stats = cursor.fetchone()

    message = (
        "üìà Statistics:\n"
        f"Total Responses: {stats[0]}\n"
        f"Correct Answers: {stats[1]}\n"
        f"Accuracy: {stats[2]:.2f}%"
    )

    update.message.reply_text(message)




# Add states for conversation
WAITING_FOR_ANSWER = 1

# Modify the existing handle_new_photo function
def handle_admin_photo(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if str(user_id) != os.getenv('ADMIN_USER_ID'):
        return

    # Check if message has caption with answer
    if update.message.caption and update.message.caption.startswith('/add'):
        try:
            # Extract correct answer from caption
            _, correct_answer = update.message.caption.split(' ', 1)
        except ValueError:
            update.message.reply_text("‚ùó Format: /add <correct_answer>")
            return

        # Get photo file_id
        photo = update.message.photo[-1].file_id

        # Store in database
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO pictures (file_id, correct_answer)
            VALUES (?, ?)
        ''', (photo, correct_answer.strip()))
        conn.commit()

        update.message.reply_text(f"‚úÖ Added new question!\nCorrect answer: {correct_answer}")
    else:
        # Store temporary photo and ask for answer
        context.user_data['pending_photo'] = update.message.photo[-1].file_id
        update.message.reply_text(
            "üìù Please send the correct answer for this picture:",
            reply_markup=ReplyKeyboardRemove()
        )
        return WAITING_FOR_ANSWER

def handle_admin_text(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if str(user_id) != os.getenv('ADMIN_USER_ID'):
        return

    if 'pending_photo' in context.user_data:
        correct_answer = update.message.text
        photo = context.user_data['pending_photo']

        # Store in database
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO pictures (file_id, correct_answer)
            VALUES (?, ?)
        ''', (photo, correct_answer.strip()))
        conn.commit()

        del context.user_data['pending_photo']
        update.message.reply_text(f"‚úÖ Added new question!\nCorrect answer: {correct_answer}")
        return ConversationHandler.END

    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext):
    context.user_data.clear()
    update.message.reply_text("‚ùå Operation cancelled")
    return ConversationHandler.END


def main():
    updater = Updater(os.getenv('BOT_TOKEN'))
    dp = updater.dispatcher

    tz = pytz.timezone('Europe/Moscow')  # GMT+3 corresponds to Moscow time

    scheduler = BackgroundScheduler(timezone=tz)

    for hour in [9, 13, 17, 21]:
        scheduler.add_job(
            send_daily_messages,
            trigger=CronTrigger(
                hour=hour,
                minute='30',  # 30 minutes past the hour
                jitter=120,   # ¬±2 minutes random variation
                timezone=tz
            ),
            args=[updater]
        )

    scheduler.start()

    # Add handlers
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('admin', admin_login))
    dp.add_handler(CommandHandler('stats', show_stats))
    dp.add_handler(CallbackQueryHandler(handle_answer))

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.photo & Filters.chat(int(os.getenv('ADMIN_USER_ID'))), handle_admin_photo)
        ],
        states={
            WAITING_FOR_ANSWER: [
                MessageHandler(Filters.text & Filters.chat(int(os.getenv('ADMIN_USER_ID'))), handle_admin_text)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    dp.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
